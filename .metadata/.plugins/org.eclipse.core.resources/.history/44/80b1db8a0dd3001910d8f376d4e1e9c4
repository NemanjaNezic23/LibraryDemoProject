package com.demo.project.controllers;

import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.context.FacesContext;

import org.primefaces.PrimeFaces;
import org.primefaces.event.DragDropEvent;
import org.primefaces.event.SelectEvent;

import com.demo.project.model.BookModel;
import com.demo.project.model.StudentModel;
import com.demo.project.model.StudentXBookModel;
import com.demo.project.services.BookService;
import com.demo.project.services.StudentService;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

@ManagedBean
@ApplicationScoped
public class BooksController implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6058081026841395006L;

	@ManagedProperty("#{bookService}")
	private BookService bookService;

	@ManagedProperty("#{studentService}")
	private StudentService studentService;

	private List<BookModel> listOfAllBooks;

	private List<BookModel> listOfBooksToRent;

	private List<StudentModel> listOfStudents;

	private List<StudentXBookModel> listOfAllRentedBooks = new ArrayList<>();
	
	private BookModel selectedBook;

	private List<StudentModel> selectedStudents = new ArrayList<>();
	
	private Date returnDate;

	@PostConstruct
	public void init() {
		listOfAllBooks = bookService.createBooks(11);
		listOfStudents = studentService.createStudents(11);
		listOfBooksToRent = new ArrayList<>();
	}

	public void onBookDrop(DragDropEvent bookDrop) {
		selectedBook = ((BookModel) bookDrop.getData());
		listOfBooksToRent.add(selectedBook);
		FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage(FacesMessage.SEVERITY_INFO, "Info",
						"Book" + selectedBook.getTitle() + " successfully added to basket"));
	}

	public void onRentBook() {
		List<StudentModel> tableSelection = new ArrayList<>();
		tableSelection.addAll(selectedStudents);
		for (StudentModel selection : tableSelection) {
			for (StudentModel student : listOfStudents) {
				if (selection.getStudentId() == student.getStudentId()) {
					student.getRentdBooks().addAll(listOfBooksToRent);
					student.getRentdBooks().forEach(x-> x.setRentedUntil(student.getReturnDate()));
					student.getRentdBooks().forEach(x-> x.setRented(true));
				}
			}
			updateRentedBooks();

			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Info",
					"Book rented to " + selectedStudents.size() + " students"));
			selectedStudents.clear();
			selectedBook = null;
		}
	}
	
	
	public void onClearBooks() {
		listOfBooksToRent.clear();
	}
	
	private void updateRentedBooks() {
		
		listOfStudents.forEach(stud -> stud.getRentdBooks().forEach(book -> listOfAllRentedBooks.add(new StudentXBookModel(stud, book, book.getRentedUntil()))));
		listOfAllRentedBooks = listOfAllRentedBooks.stream().filter(StudentXBookModel::isBookRented).collect(Collectors.toList());
	}
	
	public void onCancelBookRent() {
		selectedStudents.clear();
		selectedBook = null;
	}
	
	public void processSelectedDate(StudentModel student) {
		student.setReturnDate(getReturnDate());
	}

	public Date getStudentReturnDate(int studentIndex) {
		return listOfStudents.get(studentIndex).getReturnDate();
	}
	
	public BookService getBookService() {
		return bookService;
	}

	public void setBookService(BookService bookService) {
		this.bookService = bookService;
	}

	public List<BookModel> getListOfAllBooks() {
		return listOfAllBooks;
	}

	public void setListOfAllBooks(List<BookModel> listOfAllBooks) {
		this.listOfAllBooks = listOfAllBooks;
	}



	public List<BookModel> getListOfBooksToRent() {
		return listOfBooksToRent;
	}

	public void setListOfBooksToRent(List<BookModel> listOfBooksToRent) {
		this.listOfBooksToRent = listOfBooksToRent;
	}

	public BookModel getSelectedBook() {
		return selectedBook;
	}

	public void setSelectedBook(BookModel selectedBook) {
		this.selectedBook = selectedBook;
	}

	public List<StudentModel> getListOfStudents() {
		return listOfStudents;
	}

	public void setListOfStudents(List<StudentModel> listOfStudents) {
		this.listOfStudents = listOfStudents;
	}

	public StudentService getStudentService() {
		return studentService;
	}

	public void setStudentService(StudentService studentService) {
		this.studentService = studentService;
	}

	public List<StudentModel> getSelectedStudents() {
		return selectedStudents;
	}

	public void setSelectedStudents(List<StudentModel> selectedStudents) {
		this.selectedStudents = selectedStudents;
	}

	public List<StudentXBookModel> getListOfAllRentedBooks() {
		return listOfAllRentedBooks;
	}

	public void setListOfAllRentedBooks(List<StudentXBookModel> listOfAllRentedBooks) {
		this.listOfAllRentedBooks = listOfAllRentedBooks;
	}

	public Date getReturnDate() {
		return returnDate;
	}

	public void setReturnDate(Date returnDate) {
		this.returnDate = returnDate;
	}
	

	
	

}
